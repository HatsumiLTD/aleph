/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  AlAngle,
  AlEdge,
  AlNode,
} from './interfaces';
import {
  DisplayMode,
} from './enums/DisplayMode';
import {
  Orientation,
} from './enums/Orientation';

export namespace Components {
  interface AlAngleEditor {
    'angle': [string, AlAngle];
  }
  interface AlConsole {
    'cmd': string;
  }
  interface AlControlPanel {
    'boundingBoxEnabled': boolean;
    'displayMode': DisplayMode;
    'graphEnabled': boolean;
    'orientation': Orientation;
    'slicesIndex': number;
    'slicesWindowCenter': number;
    'slicesWindowWidth': number;
    'stackhelper': | AMI.StackHelper
    | AMI.VolumeRenderHelper;
    'volumeSteps': number;
    'volumeWindowCenter': number;
    'volumeWindowWidth': number;
  }
  interface AlEdgeEditor {
    'edge': [string, AlEdge];
  }
  interface AlNodeEditor {
    'node': [string, AlNode];
  }
  interface AlNodeList {
    'nodes': Map<string, AlNode> | null;
    'selected': string | null;
  }
  interface AlTabs {
    /**
    * Get the currently selected tab
    */
    'getSelected': () => Promise<string>;
    /**
    * Get the tab element given the tab name
    */
    'getTab': (tab: any) => Promise<any>;
    /**
    * Index or the Tab instance, of the tab to select.
    */
    'select': (tab: any) => Promise<boolean>;
  }
  interface AlUrlPicker {
    'url': string | null;
    'urls': Map<string, string> | null;
  }
}

declare global {


  interface HTMLAlAngleEditorElement extends Components.AlAngleEditor, HTMLStencilElement {}
  var HTMLAlAngleEditorElement: {
    prototype: HTMLAlAngleEditorElement;
    new (): HTMLAlAngleEditorElement;
  };

  interface HTMLAlConsoleElement extends Components.AlConsole, HTMLStencilElement {}
  var HTMLAlConsoleElement: {
    prototype: HTMLAlConsoleElement;
    new (): HTMLAlConsoleElement;
  };

  interface HTMLAlControlPanelElement extends Components.AlControlPanel, HTMLStencilElement {}
  var HTMLAlControlPanelElement: {
    prototype: HTMLAlControlPanelElement;
    new (): HTMLAlControlPanelElement;
  };

  interface HTMLAlEdgeEditorElement extends Components.AlEdgeEditor, HTMLStencilElement {}
  var HTMLAlEdgeEditorElement: {
    prototype: HTMLAlEdgeEditorElement;
    new (): HTMLAlEdgeEditorElement;
  };

  interface HTMLAlNodeEditorElement extends Components.AlNodeEditor, HTMLStencilElement {}
  var HTMLAlNodeEditorElement: {
    prototype: HTMLAlNodeEditorElement;
    new (): HTMLAlNodeEditorElement;
  };

  interface HTMLAlNodeListElement extends Components.AlNodeList, HTMLStencilElement {}
  var HTMLAlNodeListElement: {
    prototype: HTMLAlNodeListElement;
    new (): HTMLAlNodeListElement;
  };

  interface HTMLAlTabsElement extends Components.AlTabs, HTMLStencilElement {}
  var HTMLAlTabsElement: {
    prototype: HTMLAlTabsElement;
    new (): HTMLAlTabsElement;
  };

  interface HTMLAlUrlPickerElement extends Components.AlUrlPicker, HTMLStencilElement {}
  var HTMLAlUrlPickerElement: {
    prototype: HTMLAlUrlPickerElement;
    new (): HTMLAlUrlPickerElement;
  };
  interface HTMLElementTagNameMap {
    'al-angle-editor': HTMLAlAngleEditorElement;
    'al-console': HTMLAlConsoleElement;
    'al-control-panel': HTMLAlControlPanelElement;
    'al-edge-editor': HTMLAlEdgeEditorElement;
    'al-node-editor': HTMLAlNodeEditorElement;
    'al-node-list': HTMLAlNodeListElement;
    'al-tabs': HTMLAlTabsElement;
    'al-url-picker': HTMLAlUrlPickerElement;
  }
}

declare namespace LocalJSX {
  interface AlAngleEditor extends JSXBase.HTMLAttributes<HTMLAlAngleEditorElement> {
    'angle'?: [string, AlAngle];
    'onDelete'?: (event: CustomEvent<any>) => void;
  }
  interface AlConsole extends JSXBase.HTMLAttributes<HTMLAlConsoleElement> {
    'cmd'?: string;
    'onCommand'?: (event: CustomEvent<any>) => void;
  }
  interface AlControlPanel extends JSXBase.HTMLAttributes<HTMLAlControlPanelElement> {
    'boundingBoxEnabled'?: boolean;
    'displayMode'?: DisplayMode;
    'graphEnabled'?: boolean;
    'onBoundingBoxEnabledChanged'?: (event: CustomEvent<any>) => void;
    'onDisplayModeChanged'?: (event: CustomEvent<any>) => void;
    'onGraphEnabledChanged'?: (event: CustomEvent<any>) => void;
    'onOrientationChanged'?: (event: CustomEvent<any>) => void;
    'onSlicesIndexChanged'?: (event: CustomEvent<any>) => void;
    'onSlicesWindowCenterChanged'?: (event: CustomEvent<any>) => void;
    'onSlicesWindowWidthChanged'?: (event: CustomEvent<any>) => void;
    'onVolumeStepsChanged'?: (event: CustomEvent<any>) => void;
    'onVolumeWindowCenterChanged'?: (event: CustomEvent<any>) => void;
    'onVolumeWindowWidthChanged'?: (event: CustomEvent<any>) => void;
    'orientation'?: Orientation;
    'slicesIndex'?: number;
    'slicesWindowCenter'?: number;
    'slicesWindowWidth'?: number;
    'stackhelper'?: | AMI.StackHelper
    | AMI.VolumeRenderHelper;
    'volumeSteps'?: number;
    'volumeWindowCenter'?: number;
    'volumeWindowWidth'?: number;
  }
  interface AlEdgeEditor extends JSXBase.HTMLAttributes<HTMLAlEdgeEditorElement> {
    'edge'?: [string, AlEdge];
    'onDelete'?: (event: CustomEvent<any>) => void;
  }
  interface AlNodeEditor extends JSXBase.HTMLAttributes<HTMLAlNodeEditorElement> {
    'node'?: [string, AlNode];
    'onDelete'?: (event: CustomEvent<any>) => void;
    'onSave'?: (event: CustomEvent<any>) => void;
  }
  interface AlNodeList extends JSXBase.HTMLAttributes<HTMLAlNodeListElement> {
    'nodes'?: Map<string, AlNode> | null;
    'onSelectedChanged'?: (event: CustomEvent<any>) => void;
    'selected'?: string | null;
  }
  interface AlTabs extends JSXBase.HTMLAttributes<HTMLAlTabsElement> {
    /**
    * Emitted when the navigation has finished transitioning to a new component.
    */
    'onIonTabsDidChange'?: (event: CustomEvent<{ tab: string }>) => void;
    /**
    * Emitted when the navigation is about to transition to a new component.
    */
    'onIonTabsWillChange'?: (event: CustomEvent<{ tab: string }>) => void;
  }
  interface AlUrlPicker extends JSXBase.HTMLAttributes<HTMLAlUrlPickerElement> {
    'onUrlChanged'?: (event: CustomEvent<any>) => void;
    'url'?: string | null;
    'urls'?: Map<string, string> | null;
  }

  interface IntrinsicElements {
    'al-angle-editor': AlAngleEditor;
    'al-console': AlConsole;
    'al-control-panel': AlControlPanel;
    'al-edge-editor': AlEdgeEditor;
    'al-node-editor': AlNodeEditor;
    'al-node-list': AlNodeList;
    'al-tabs': AlTabs;
    'al-url-picker': AlUrlPicker;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


